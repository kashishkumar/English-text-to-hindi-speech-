# What is the usecase → english Text to hindi speech conversion
# What technology is used → English to hindi Deep learning based translation and then to hindi speech conversion
# What features to include → User can read a english book as a hindi audiobook, user can upload a english file and get mp3 recording in hindi language
# How to implement (high level architecture) → upload file → translate to hindi → convert to mp3 → download mp3 file


# Add credentials for google cloud
import os
os.environ["GOOGLE_APPLICATION_CREDENTIALS"]="english-to-hindi-audiobook-10299c01fe55.json"

# upload a text file with english text using open file dialog 
from tkinter import filedialog
def upload_file():
    file_path = filedialog.askopenfilename()
    print(file_path)
    return file_path


# translate to hindi using google translate
from google.cloud import translate_v2
def translate_to_hindi(file_path):
    translate_client = translate_v2.Client()
    with open(file_path, 'r') as f:
        text = f.read()
    translation = translate_client.translate(text,target_language='hi')   
    return translation

# Summarise text using google cloud api
#import language
from google.cloud import language
def summarise_text(translation):
    client = language.LanguageServiceClient()
    return client.summarise_text(translation['translatedText'])


from google.cloud import texttospeech
# text to speech recognition in hindi language using google text to speech
def text_to_speech(translation):
    client = texttospeech.TextToSpeechClient()
    synthesis_input = texttospeech.SynthesisInput(text=translation['translatedText'])
    voice = texttospeech.VoiceSelectionParams(language_code='hi-IN', ssml_gender = texttospeech.SsmlVoiceGender.FEMALE, name='hi-IN-Wavenet-A')
    audio_config = texttospeech.AudioConfig(audio_encoding=texttospeech.AudioEncoding.MP3)
    response = client.synthesize_speech(request={"input": synthesis_input, "voice": voice, "audio_config": audio_config})
    return response

# download mp3 audio file
def download_mp3(response, file_name):
    with open(file_name + '.mp3', "wb") as out:
        out.write(response.audio_content)
    print('Audio content written to file to ' + '"' + file_name+ '.mp3"')


# Write a test case
file_path = upload_file()
translation = translate_to_hindi(file_path)
#summary = summarise_text(translation)
response = text_to_speech(translation)
download_mp3(response, file_path.split('/')[-1])
